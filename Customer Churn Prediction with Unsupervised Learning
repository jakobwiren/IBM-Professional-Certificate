{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h1> Customer Churn Classification with Unsupervised Learning </h1>\n",
    "In this workbook we will apply unsupervised learning to classify customer churn on a telecom service provider. The structure of the workbook will follow:\n",
    "\n",
    "1. Analysis approach\n",
    "2. Exploratory Analysis\n",
    "3. Data preparation and feature creation\n",
    "4. Model creation and training\n",
    "5. Conclusions and next steps\n",
    "\n",
    "The key objective of this workbook will be to improve accuracy of the model. This will support a business user to understand whether a customer will churn in the future and be proactive and take actions to prevent the customer to churn.\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h2> 1. Analysis approach </h2>\n",
    "In this notebook we will try to classify customer churn for a telecom provider using different types of clustering methods. The clustering methods we will use in this notebook are:\n",
    "\n",
    "1. K-Means\n",
    "2. Hierarchial Agglomorate\n",
    "3. K-Means as input to Random Forest\n",
    "\n",
    "We will use two datasets to predict the churn rate in this notebook:\n",
    "1. <i> Telco_Churn_Status.csv </i> - \n",
    "This dataset contains information about whether a customer has churned or not and the reason for the churn.\n",
    "2. <i> Telco_Churn_Services </i> - \n",
    "This information contains information about the services a customer had\n",
    "\n",
    "Before going into the next session we import the libraries that we need for this workbook"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "from sklearn.model_selection import train_test_split, StratifiedShuffleSplit\n",
    "from sklearn.preprocessing import LabelEncoder, LabelBinarizer, OrdinalEncoder, MinMaxScaler\n",
    "from sklearn.metrics import confusion_matrix, accuracy_score, classification_report, f1_score, roc_auc_score\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.cluster import KMeans, AgglomerativeClustering"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h2> 2. Exploratory Analysis </h2>\n",
    "We start by importing the two datasets and look at their characteristics individually."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "status_df = pd.read_excel('Telco_Churn_Status.xlsx')\n",
    "services_df = pd.read_excel('Telco_Churn_Services.xlsx')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 7043 entries, 0 to 7042\n",
      "Data columns (total 11 columns):\n",
      " #   Column              Non-Null Count  Dtype \n",
      "---  ------              --------------  ----- \n",
      " 0   Customer ID         7043 non-null   object\n",
      " 1   Count               7043 non-null   int64 \n",
      " 2   Quarter             7043 non-null   object\n",
      " 3   Satisfaction Score  7043 non-null   int64 \n",
      " 4   Customer Status     7043 non-null   object\n",
      " 5   Churn Label         7043 non-null   object\n",
      " 6   Churn Value         7043 non-null   int64 \n",
      " 7   Churn Score         7043 non-null   int64 \n",
      " 8   CLTV                7043 non-null   int64 \n",
      " 9   Churn Category      1869 non-null   object\n",
      " 10  Churn Reason        1869 non-null   object\n",
      "dtypes: int64(5), object(6)\n",
      "memory usage: 605.4+ KB\n"
     ]
    }
   ],
   "source": [
    "status_df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Customer ID</th>\n",
       "      <th>Count</th>\n",
       "      <th>Quarter</th>\n",
       "      <th>Satisfaction Score</th>\n",
       "      <th>Customer Status</th>\n",
       "      <th>Churn Label</th>\n",
       "      <th>Churn Value</th>\n",
       "      <th>Churn Score</th>\n",
       "      <th>CLTV</th>\n",
       "      <th>Churn Category</th>\n",
       "      <th>Churn Reason</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>8779-QRDMV</td>\n",
       "      <td>1</td>\n",
       "      <td>Q3</td>\n",
       "      <td>3</td>\n",
       "      <td>Churned</td>\n",
       "      <td>Yes</td>\n",
       "      <td>1</td>\n",
       "      <td>91</td>\n",
       "      <td>5433</td>\n",
       "      <td>Competitor</td>\n",
       "      <td>Competitor offered more data</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>7495-OOKFY</td>\n",
       "      <td>1</td>\n",
       "      <td>Q3</td>\n",
       "      <td>3</td>\n",
       "      <td>Churned</td>\n",
       "      <td>Yes</td>\n",
       "      <td>1</td>\n",
       "      <td>69</td>\n",
       "      <td>5302</td>\n",
       "      <td>Competitor</td>\n",
       "      <td>Competitor made better offer</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1658-BYGOY</td>\n",
       "      <td>1</td>\n",
       "      <td>Q3</td>\n",
       "      <td>2</td>\n",
       "      <td>Churned</td>\n",
       "      <td>Yes</td>\n",
       "      <td>1</td>\n",
       "      <td>81</td>\n",
       "      <td>3179</td>\n",
       "      <td>Competitor</td>\n",
       "      <td>Competitor made better offer</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4598-XLKNJ</td>\n",
       "      <td>1</td>\n",
       "      <td>Q3</td>\n",
       "      <td>2</td>\n",
       "      <td>Churned</td>\n",
       "      <td>Yes</td>\n",
       "      <td>1</td>\n",
       "      <td>88</td>\n",
       "      <td>5337</td>\n",
       "      <td>Dissatisfaction</td>\n",
       "      <td>Limited range of services</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4846-WHAFZ</td>\n",
       "      <td>1</td>\n",
       "      <td>Q3</td>\n",
       "      <td>2</td>\n",
       "      <td>Churned</td>\n",
       "      <td>Yes</td>\n",
       "      <td>1</td>\n",
       "      <td>67</td>\n",
       "      <td>2793</td>\n",
       "      <td>Price</td>\n",
       "      <td>Extra data charges</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  Customer ID  Count Quarter  Satisfaction Score Customer Status Churn Label  \\\n",
       "0  8779-QRDMV      1      Q3                   3         Churned         Yes   \n",
       "1  7495-OOKFY      1      Q3                   3         Churned         Yes   \n",
       "2  1658-BYGOY      1      Q3                   2         Churned         Yes   \n",
       "3  4598-XLKNJ      1      Q3                   2         Churned         Yes   \n",
       "4  4846-WHAFZ      1      Q3                   2         Churned         Yes   \n",
       "\n",
       "   Churn Value  Churn Score  CLTV   Churn Category  \\\n",
       "0            1           91  5433       Competitor   \n",
       "1            1           69  5302       Competitor   \n",
       "2            1           81  3179       Competitor   \n",
       "3            1           88  5337  Dissatisfaction   \n",
       "4            1           67  2793            Price   \n",
       "\n",
       "                   Churn Reason  \n",
       "0  Competitor offered more data  \n",
       "1  Competitor made better offer  \n",
       "2  Competitor made better offer  \n",
       "3     Limited range of services  \n",
       "4            Extra data charges  "
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "status_df.head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 7043 entries, 0 to 7042\n",
      "Data columns (total 30 columns):\n",
      " #   Column                             Non-Null Count  Dtype  \n",
      "---  ------                             --------------  -----  \n",
      " 0   Customer ID                        7043 non-null   object \n",
      " 1   Count                              7043 non-null   int64  \n",
      " 2   Quarter                            7043 non-null   object \n",
      " 3   Referred a Friend                  7043 non-null   object \n",
      " 4   Number of Referrals                7043 non-null   int64  \n",
      " 5   Tenure in Months                   7043 non-null   int64  \n",
      " 6   Offer                              7043 non-null   object \n",
      " 7   Phone Service                      7043 non-null   object \n",
      " 8   Avg Monthly Long Distance Charges  7043 non-null   float64\n",
      " 9   Multiple Lines                     7043 non-null   object \n",
      " 10  Internet Service                   7043 non-null   object \n",
      " 11  Internet Type                      7043 non-null   object \n",
      " 12  Avg Monthly GB Download            7043 non-null   int64  \n",
      " 13  Online Security                    7043 non-null   object \n",
      " 14  Online Backup                      7043 non-null   object \n",
      " 15  Device Protection Plan             7043 non-null   object \n",
      " 16  Premium Tech Support               7043 non-null   object \n",
      " 17  Streaming TV                       7043 non-null   object \n",
      " 18  Streaming Movies                   7043 non-null   object \n",
      " 19  Streaming Music                    7043 non-null   object \n",
      " 20  Unlimited Data                     7043 non-null   object \n",
      " 21  Contract                           7043 non-null   object \n",
      " 22  Paperless Billing                  7043 non-null   object \n",
      " 23  Payment Method                     7043 non-null   object \n",
      " 24  Monthly Charge                     7043 non-null   float64\n",
      " 25  Total Charges                      7043 non-null   float64\n",
      " 26  Total Refunds                      7043 non-null   float64\n",
      " 27  Total Extra Data Charges           7043 non-null   int64  \n",
      " 28  Total Long Distance Charges        7043 non-null   float64\n",
      " 29  Total Revenue                      7043 non-null   float64\n",
      "dtypes: float64(6), int64(5), object(19)\n",
      "memory usage: 1.6+ MB\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Customer ID</th>\n",
       "      <th>Count</th>\n",
       "      <th>Quarter</th>\n",
       "      <th>Referred a Friend</th>\n",
       "      <th>Number of Referrals</th>\n",
       "      <th>Tenure in Months</th>\n",
       "      <th>Offer</th>\n",
       "      <th>Phone Service</th>\n",
       "      <th>Avg Monthly Long Distance Charges</th>\n",
       "      <th>Multiple Lines</th>\n",
       "      <th>...</th>\n",
       "      <th>Unlimited Data</th>\n",
       "      <th>Contract</th>\n",
       "      <th>Paperless Billing</th>\n",
       "      <th>Payment Method</th>\n",
       "      <th>Monthly Charge</th>\n",
       "      <th>Total Charges</th>\n",
       "      <th>Total Refunds</th>\n",
       "      <th>Total Extra Data Charges</th>\n",
       "      <th>Total Long Distance Charges</th>\n",
       "      <th>Total Revenue</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>8779-QRDMV</td>\n",
       "      <td>1</td>\n",
       "      <td>Q3</td>\n",
       "      <td>No</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>None</td>\n",
       "      <td>No</td>\n",
       "      <td>0.00</td>\n",
       "      <td>No</td>\n",
       "      <td>...</td>\n",
       "      <td>No</td>\n",
       "      <td>Month-to-Month</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Bank Withdrawal</td>\n",
       "      <td>39.65</td>\n",
       "      <td>39.65</td>\n",
       "      <td>0.00</td>\n",
       "      <td>20</td>\n",
       "      <td>0.00</td>\n",
       "      <td>59.65</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>7495-OOKFY</td>\n",
       "      <td>1</td>\n",
       "      <td>Q3</td>\n",
       "      <td>Yes</td>\n",
       "      <td>1</td>\n",
       "      <td>8</td>\n",
       "      <td>Offer E</td>\n",
       "      <td>Yes</td>\n",
       "      <td>48.85</td>\n",
       "      <td>Yes</td>\n",
       "      <td>...</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Month-to-Month</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Credit Card</td>\n",
       "      <td>80.65</td>\n",
       "      <td>633.30</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0</td>\n",
       "      <td>390.80</td>\n",
       "      <td>1024.10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1658-BYGOY</td>\n",
       "      <td>1</td>\n",
       "      <td>Q3</td>\n",
       "      <td>No</td>\n",
       "      <td>0</td>\n",
       "      <td>18</td>\n",
       "      <td>Offer D</td>\n",
       "      <td>Yes</td>\n",
       "      <td>11.33</td>\n",
       "      <td>Yes</td>\n",
       "      <td>...</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Month-to-Month</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Bank Withdrawal</td>\n",
       "      <td>95.45</td>\n",
       "      <td>1752.55</td>\n",
       "      <td>45.61</td>\n",
       "      <td>0</td>\n",
       "      <td>203.94</td>\n",
       "      <td>1910.88</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4598-XLKNJ</td>\n",
       "      <td>1</td>\n",
       "      <td>Q3</td>\n",
       "      <td>Yes</td>\n",
       "      <td>1</td>\n",
       "      <td>25</td>\n",
       "      <td>Offer C</td>\n",
       "      <td>Yes</td>\n",
       "      <td>19.76</td>\n",
       "      <td>No</td>\n",
       "      <td>...</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Month-to-Month</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Bank Withdrawal</td>\n",
       "      <td>98.50</td>\n",
       "      <td>2514.50</td>\n",
       "      <td>13.43</td>\n",
       "      <td>0</td>\n",
       "      <td>494.00</td>\n",
       "      <td>2995.07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4846-WHAFZ</td>\n",
       "      <td>1</td>\n",
       "      <td>Q3</td>\n",
       "      <td>Yes</td>\n",
       "      <td>1</td>\n",
       "      <td>37</td>\n",
       "      <td>Offer C</td>\n",
       "      <td>Yes</td>\n",
       "      <td>6.33</td>\n",
       "      <td>Yes</td>\n",
       "      <td>...</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Month-to-Month</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Bank Withdrawal</td>\n",
       "      <td>76.50</td>\n",
       "      <td>2868.15</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0</td>\n",
       "      <td>234.21</td>\n",
       "      <td>3102.36</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 30 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "  Customer ID  Count Quarter Referred a Friend  Number of Referrals  \\\n",
       "0  8779-QRDMV      1      Q3                No                    0   \n",
       "1  7495-OOKFY      1      Q3               Yes                    1   \n",
       "2  1658-BYGOY      1      Q3                No                    0   \n",
       "3  4598-XLKNJ      1      Q3               Yes                    1   \n",
       "4  4846-WHAFZ      1      Q3               Yes                    1   \n",
       "\n",
       "   Tenure in Months    Offer Phone Service  Avg Monthly Long Distance Charges  \\\n",
       "0                 1     None            No                               0.00   \n",
       "1                 8  Offer E           Yes                              48.85   \n",
       "2                18  Offer D           Yes                              11.33   \n",
       "3                25  Offer C           Yes                              19.76   \n",
       "4                37  Offer C           Yes                               6.33   \n",
       "\n",
       "  Multiple Lines  ... Unlimited Data        Contract  Paperless Billing  \\\n",
       "0             No  ...             No  Month-to-Month                Yes   \n",
       "1            Yes  ...            Yes  Month-to-Month                Yes   \n",
       "2            Yes  ...            Yes  Month-to-Month                Yes   \n",
       "3             No  ...            Yes  Month-to-Month                Yes   \n",
       "4            Yes  ...            Yes  Month-to-Month                Yes   \n",
       "\n",
       "    Payment Method Monthly Charge Total Charges Total Refunds  \\\n",
       "0  Bank Withdrawal          39.65         39.65          0.00   \n",
       "1      Credit Card          80.65        633.30          0.00   \n",
       "2  Bank Withdrawal          95.45       1752.55         45.61   \n",
       "3  Bank Withdrawal          98.50       2514.50         13.43   \n",
       "4  Bank Withdrawal          76.50       2868.15          0.00   \n",
       "\n",
       "  Total Extra Data Charges Total Long Distance Charges Total Revenue  \n",
       "0                       20                        0.00         59.65  \n",
       "1                        0                      390.80       1024.10  \n",
       "2                        0                      203.94       1910.88  \n",
       "3                        0                      494.00       2995.07  \n",
       "4                        0                      234.21       3102.36  \n",
       "\n",
       "[5 rows x 30 columns]"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "services_df.info()\n",
    "services_df.head(5)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The second dataset contains 29 columns with a mix of strings, float and integers. Given that we have quite a lot of information from the customer I reckon we should good potential to predict the churn with these 2 datasets.\n",
    "\n",
    "We can see that both data sets contain 7043 values. In <i> status_df </i> we can see that two columns only contain 1869 values, hence we will drop them. We will also drop the <i> Quarter </i> column in <i> services_df </i> since we have that column already in the other dataframe and we will drop it."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Customer ID', 'Referred a Friend', 'Number of Referrals',\n",
       "       'Tenure in Months', 'Offer', 'Phone Service',\n",
       "       'Avg Monthly Long Distance Charges', 'Multiple Lines',\n",
       "       'Internet Service', 'Internet Type', 'Avg Monthly GB Download',\n",
       "       'Online Security', 'Online Backup', 'Device Protection Plan',\n",
       "       'Premium Tech Support', 'Streaming TV', 'Streaming Movies',\n",
       "       'Streaming Music', 'Unlimited Data', 'Contract', 'Paperless Billing',\n",
       "       'Payment Method', 'Monthly Charge', 'Total Charges', 'Total Refunds',\n",
       "       'Total Extra Data Charges', 'Total Long Distance Charges',\n",
       "       'Total Revenue'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "status_df = status_df.drop(['Count','Churn Category','Churn Reason', 'Churn Label', 'Customer Status', 'Churn Score'], axis = 1)\n",
    "status_df.columns\n",
    "services_df = services_df.drop(['Quarter', 'Count'], axis = 1)\n",
    "services_df.columns"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's join the two dataframes to one by using the key \"Customer ID\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Customer ID</th>\n",
       "      <th>Quarter</th>\n",
       "      <th>Satisfaction Score</th>\n",
       "      <th>Churn Value</th>\n",
       "      <th>CLTV</th>\n",
       "      <th>Referred a Friend</th>\n",
       "      <th>Number of Referrals</th>\n",
       "      <th>Tenure in Months</th>\n",
       "      <th>Offer</th>\n",
       "      <th>Phone Service</th>\n",
       "      <th>...</th>\n",
       "      <th>Unlimited Data</th>\n",
       "      <th>Contract</th>\n",
       "      <th>Paperless Billing</th>\n",
       "      <th>Payment Method</th>\n",
       "      <th>Monthly Charge</th>\n",
       "      <th>Total Charges</th>\n",
       "      <th>Total Refunds</th>\n",
       "      <th>Total Extra Data Charges</th>\n",
       "      <th>Total Long Distance Charges</th>\n",
       "      <th>Total Revenue</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>8779-QRDMV</td>\n",
       "      <td>Q3</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>5433</td>\n",
       "      <td>No</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>None</td>\n",
       "      <td>No</td>\n",
       "      <td>...</td>\n",
       "      <td>No</td>\n",
       "      <td>Month-to-Month</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Bank Withdrawal</td>\n",
       "      <td>39.65</td>\n",
       "      <td>39.65</td>\n",
       "      <td>0.00</td>\n",
       "      <td>20</td>\n",
       "      <td>0.00</td>\n",
       "      <td>59.65</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>7495-OOKFY</td>\n",
       "      <td>Q3</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>5302</td>\n",
       "      <td>Yes</td>\n",
       "      <td>1</td>\n",
       "      <td>8</td>\n",
       "      <td>Offer E</td>\n",
       "      <td>Yes</td>\n",
       "      <td>...</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Month-to-Month</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Credit Card</td>\n",
       "      <td>80.65</td>\n",
       "      <td>633.30</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0</td>\n",
       "      <td>390.80</td>\n",
       "      <td>1024.10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1658-BYGOY</td>\n",
       "      <td>Q3</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>3179</td>\n",
       "      <td>No</td>\n",
       "      <td>0</td>\n",
       "      <td>18</td>\n",
       "      <td>Offer D</td>\n",
       "      <td>Yes</td>\n",
       "      <td>...</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Month-to-Month</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Bank Withdrawal</td>\n",
       "      <td>95.45</td>\n",
       "      <td>1752.55</td>\n",
       "      <td>45.61</td>\n",
       "      <td>0</td>\n",
       "      <td>203.94</td>\n",
       "      <td>1910.88</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4598-XLKNJ</td>\n",
       "      <td>Q3</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>5337</td>\n",
       "      <td>Yes</td>\n",
       "      <td>1</td>\n",
       "      <td>25</td>\n",
       "      <td>Offer C</td>\n",
       "      <td>Yes</td>\n",
       "      <td>...</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Month-to-Month</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Bank Withdrawal</td>\n",
       "      <td>98.50</td>\n",
       "      <td>2514.50</td>\n",
       "      <td>13.43</td>\n",
       "      <td>0</td>\n",
       "      <td>494.00</td>\n",
       "      <td>2995.07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4846-WHAFZ</td>\n",
       "      <td>Q3</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>2793</td>\n",
       "      <td>Yes</td>\n",
       "      <td>1</td>\n",
       "      <td>37</td>\n",
       "      <td>Offer C</td>\n",
       "      <td>Yes</td>\n",
       "      <td>...</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Month-to-Month</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Bank Withdrawal</td>\n",
       "      <td>76.50</td>\n",
       "      <td>2868.15</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0</td>\n",
       "      <td>234.21</td>\n",
       "      <td>3102.36</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 32 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "  Customer ID Quarter  Satisfaction Score  Churn Value  CLTV  \\\n",
       "0  8779-QRDMV      Q3                   3            1  5433   \n",
       "1  7495-OOKFY      Q3                   3            1  5302   \n",
       "2  1658-BYGOY      Q3                   2            1  3179   \n",
       "3  4598-XLKNJ      Q3                   2            1  5337   \n",
       "4  4846-WHAFZ      Q3                   2            1  2793   \n",
       "\n",
       "  Referred a Friend  Number of Referrals  Tenure in Months    Offer  \\\n",
       "0                No                    0                 1     None   \n",
       "1               Yes                    1                 8  Offer E   \n",
       "2                No                    0                18  Offer D   \n",
       "3               Yes                    1                25  Offer C   \n",
       "4               Yes                    1                37  Offer C   \n",
       "\n",
       "  Phone Service  ...  Unlimited Data        Contract Paperless Billing  \\\n",
       "0            No  ...              No  Month-to-Month               Yes   \n",
       "1           Yes  ...             Yes  Month-to-Month               Yes   \n",
       "2           Yes  ...             Yes  Month-to-Month               Yes   \n",
       "3           Yes  ...             Yes  Month-to-Month               Yes   \n",
       "4           Yes  ...             Yes  Month-to-Month               Yes   \n",
       "\n",
       "    Payment Method  Monthly Charge Total Charges Total Refunds  \\\n",
       "0  Bank Withdrawal           39.65         39.65          0.00   \n",
       "1      Credit Card           80.65        633.30          0.00   \n",
       "2  Bank Withdrawal           95.45       1752.55         45.61   \n",
       "3  Bank Withdrawal           98.50       2514.50         13.43   \n",
       "4  Bank Withdrawal           76.50       2868.15          0.00   \n",
       "\n",
       "  Total Extra Data Charges Total Long Distance Charges Total Revenue  \n",
       "0                       20                        0.00         59.65  \n",
       "1                        0                      390.80       1024.10  \n",
       "2                        0                      203.94       1910.88  \n",
       "3                        0                      494.00       2995.07  \n",
       "4                        0                      234.21       3102.36  \n",
       "\n",
       "[5 rows x 32 columns]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "(7043, 32)"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_joined = pd.merge(status_df,services_df,on='Customer ID',how='outer')\n",
    "display(df_joined.head(5))\n",
    "df_joined.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [],
   "source": [
    "#sns.pairplot(df_joined, hue = 'Churn Value')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Looking at the pairplot we can see that many of the variables seem to be differentiated compared to <i> Churn Value </i> which indicates there is a good chance to use these variables in order to classify whether a customer has churned or not. We also use this exercise to identify possible outliers. From the charts we can see some outliers but nothing significant, potentially impacting the general change of behavior. Having a few customers with very large data consumption for example is something likely to happen in reality. Hence, we will not address this. Let's move to the next step, to prepare the data for modelling."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Customer ID                          7043\n",
       "Quarter                                 1\n",
       "Satisfaction Score                      5\n",
       "Churn Value                             2\n",
       "CLTV                                 3438\n",
       "Referred a Friend                       2\n",
       "Number of Referrals                    12\n",
       "Tenure in Months                       72\n",
       "Offer                                   6\n",
       "Phone Service                           2\n",
       "Avg Monthly Long Distance Charges    3584\n",
       "Multiple Lines                          2\n",
       "Internet Service                        2\n",
       "Internet Type                           4\n",
       "Avg Monthly GB Download                50\n",
       "Online Security                         2\n",
       "Online Backup                           2\n",
       "Device Protection Plan                  2\n",
       "Premium Tech Support                    2\n",
       "Streaming TV                            2\n",
       "Streaming Movies                        2\n",
       "Streaming Music                         2\n",
       "Unlimited Data                          2\n",
       "Contract                                3\n",
       "Paperless Billing                       2\n",
       "Payment Method                          3\n",
       "Monthly Charge                       1585\n",
       "Total Charges                        6540\n",
       "Total Refunds                         500\n",
       "Total Extra Data Charges               16\n",
       "Total Long Distance Charges          6110\n",
       "Total Revenue                        6996\n",
       "dtype: int64"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#check number of unique values for each column\n",
    "df_unique = df_joined.nunique()\n",
    "df_unique"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Before we do anything we can see that the quarter column only has 1 unique value so let's drop that one"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_joined = df_joined.drop('Quarter', axis = 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [],
   "source": [
    "#set customer ID to index\n",
    "df_joined = df_joined.set_index('Customer ID')\n",
    "\n",
    "#create our binary varibales\n",
    "binary_variables = list(df_unique[df_unique == 2].index)\n",
    "#binary_variables\n",
    "\n",
    "#create our categorical variables\n",
    "categorical_variables = list(df_unique[(df_unique > 2) & (df_unique < 7)].index)\n",
    "#categorical_variables\n",
    "\n",
    "#see our values in the categorical columns\n",
    "[[i, list(df_joined[i].unique())] for i in categorical_variables]\n",
    "\n",
    "#create our ordinal variables\n",
    "ordinal_variables = ['Satisfaction Score']\n",
    "\n",
    "#create our ordinal variables\n",
    "numeric_variables = list(set(df_joined.columns) - set(ordinal_variables) - set(categorical_variables) - set(binary_variables))\n",
    "#df_joined[numeric_variables].hist(figsize=(15,6))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Okay, now when we have divided our variables into different buckets, let's transform them, "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>count</th>\n",
       "      <th>mean</th>\n",
       "      <th>std</th>\n",
       "      <th>min</th>\n",
       "      <th>25%</th>\n",
       "      <th>50%</th>\n",
       "      <th>75%</th>\n",
       "      <th>max</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Satisfaction Score</th>\n",
       "      <td>7043.0</td>\n",
       "      <td>2.244924</td>\n",
       "      <td>1.201657</td>\n",
       "      <td>0.00</td>\n",
       "      <td>2.000</td>\n",
       "      <td>2.00</td>\n",
       "      <td>3.000</td>\n",
       "      <td>4.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Churn Value</th>\n",
       "      <td>7043.0</td>\n",
       "      <td>0.265370</td>\n",
       "      <td>0.441561</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.000</td>\n",
       "      <td>1.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>CLTV</th>\n",
       "      <td>7043.0</td>\n",
       "      <td>4400.295755</td>\n",
       "      <td>1183.057152</td>\n",
       "      <td>2003.00</td>\n",
       "      <td>3469.000</td>\n",
       "      <td>4527.00</td>\n",
       "      <td>5380.500</td>\n",
       "      <td>6500.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Referred a Friend</th>\n",
       "      <td>7043.0</td>\n",
       "      <td>0.457476</td>\n",
       "      <td>0.498224</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.000</td>\n",
       "      <td>1.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Number of Referrals</th>\n",
       "      <td>7043.0</td>\n",
       "      <td>1.951867</td>\n",
       "      <td>3.001199</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.00</td>\n",
       "      <td>3.000</td>\n",
       "      <td>11.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Tenure in Months</th>\n",
       "      <td>7043.0</td>\n",
       "      <td>32.386767</td>\n",
       "      <td>24.542061</td>\n",
       "      <td>1.00</td>\n",
       "      <td>9.000</td>\n",
       "      <td>29.00</td>\n",
       "      <td>55.000</td>\n",
       "      <td>72.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Phone Service</th>\n",
       "      <td>7043.0</td>\n",
       "      <td>0.903166</td>\n",
       "      <td>0.295752</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.000</td>\n",
       "      <td>1.00</td>\n",
       "      <td>1.000</td>\n",
       "      <td>1.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Avg Monthly Long Distance Charges</th>\n",
       "      <td>7043.0</td>\n",
       "      <td>22.958954</td>\n",
       "      <td>15.448113</td>\n",
       "      <td>0.00</td>\n",
       "      <td>9.210</td>\n",
       "      <td>22.89</td>\n",
       "      <td>36.395</td>\n",
       "      <td>49.99</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Multiple Lines</th>\n",
       "      <td>7043.0</td>\n",
       "      <td>0.421837</td>\n",
       "      <td>0.493888</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.000</td>\n",
       "      <td>1.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Internet Service</th>\n",
       "      <td>7043.0</td>\n",
       "      <td>0.783331</td>\n",
       "      <td>0.412004</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.000</td>\n",
       "      <td>1.00</td>\n",
       "      <td>1.000</td>\n",
       "      <td>1.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Avg Monthly GB Download</th>\n",
       "      <td>7043.0</td>\n",
       "      <td>20.515405</td>\n",
       "      <td>20.418940</td>\n",
       "      <td>0.00</td>\n",
       "      <td>3.000</td>\n",
       "      <td>17.00</td>\n",
       "      <td>27.000</td>\n",
       "      <td>85.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Online Security</th>\n",
       "      <td>7043.0</td>\n",
       "      <td>0.286668</td>\n",
       "      <td>0.452237</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.000</td>\n",
       "      <td>1.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Online Backup</th>\n",
       "      <td>7043.0</td>\n",
       "      <td>0.344881</td>\n",
       "      <td>0.475363</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.000</td>\n",
       "      <td>1.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Device Protection Plan</th>\n",
       "      <td>7043.0</td>\n",
       "      <td>0.343888</td>\n",
       "      <td>0.475038</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.000</td>\n",
       "      <td>1.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Premium Tech Support</th>\n",
       "      <td>7043.0</td>\n",
       "      <td>0.290217</td>\n",
       "      <td>0.453895</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.000</td>\n",
       "      <td>1.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Streaming TV</th>\n",
       "      <td>7043.0</td>\n",
       "      <td>0.384353</td>\n",
       "      <td>0.486477</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.000</td>\n",
       "      <td>1.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Streaming Movies</th>\n",
       "      <td>7043.0</td>\n",
       "      <td>0.387903</td>\n",
       "      <td>0.487307</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.000</td>\n",
       "      <td>1.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Streaming Music</th>\n",
       "      <td>7043.0</td>\n",
       "      <td>0.353259</td>\n",
       "      <td>0.478016</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.000</td>\n",
       "      <td>1.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Unlimited Data</th>\n",
       "      <td>7043.0</td>\n",
       "      <td>0.673719</td>\n",
       "      <td>0.468885</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.000</td>\n",
       "      <td>1.00</td>\n",
       "      <td>1.000</td>\n",
       "      <td>1.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Paperless Billing</th>\n",
       "      <td>7043.0</td>\n",
       "      <td>0.592219</td>\n",
       "      <td>0.491457</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.000</td>\n",
       "      <td>1.00</td>\n",
       "      <td>1.000</td>\n",
       "      <td>1.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Monthly Charge</th>\n",
       "      <td>7043.0</td>\n",
       "      <td>64.761692</td>\n",
       "      <td>30.090047</td>\n",
       "      <td>18.25</td>\n",
       "      <td>35.500</td>\n",
       "      <td>70.35</td>\n",
       "      <td>89.850</td>\n",
       "      <td>118.75</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Total Charges</th>\n",
       "      <td>7043.0</td>\n",
       "      <td>2280.381264</td>\n",
       "      <td>2266.220462</td>\n",
       "      <td>18.80</td>\n",
       "      <td>400.150</td>\n",
       "      <td>1394.55</td>\n",
       "      <td>3786.600</td>\n",
       "      <td>8684.80</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Total Refunds</th>\n",
       "      <td>7043.0</td>\n",
       "      <td>1.962182</td>\n",
       "      <td>7.902614</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.000</td>\n",
       "      <td>49.79</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Total Extra Data Charges</th>\n",
       "      <td>7043.0</td>\n",
       "      <td>6.860713</td>\n",
       "      <td>25.104978</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.000</td>\n",
       "      <td>150.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Total Long Distance Charges</th>\n",
       "      <td>7043.0</td>\n",
       "      <td>749.099262</td>\n",
       "      <td>846.660055</td>\n",
       "      <td>0.00</td>\n",
       "      <td>70.545</td>\n",
       "      <td>401.44</td>\n",
       "      <td>1191.100</td>\n",
       "      <td>3564.72</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Total Revenue</th>\n",
       "      <td>7043.0</td>\n",
       "      <td>3034.379056</td>\n",
       "      <td>2865.204542</td>\n",
       "      <td>21.36</td>\n",
       "      <td>605.610</td>\n",
       "      <td>2108.64</td>\n",
       "      <td>4801.145</td>\n",
       "      <td>11979.34</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Contract_One Year</th>\n",
       "      <td>7043.0</td>\n",
       "      <td>0.220077</td>\n",
       "      <td>0.414328</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.000</td>\n",
       "      <td>1.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Contract_Two Year</th>\n",
       "      <td>7043.0</td>\n",
       "      <td>0.267358</td>\n",
       "      <td>0.442612</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.000</td>\n",
       "      <td>1.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Internet Type_DSL</th>\n",
       "      <td>7043.0</td>\n",
       "      <td>0.234559</td>\n",
       "      <td>0.423753</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.000</td>\n",
       "      <td>1.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Internet Type_Fiber Optic</th>\n",
       "      <td>7043.0</td>\n",
       "      <td>0.430924</td>\n",
       "      <td>0.495241</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.000</td>\n",
       "      <td>1.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Internet Type_None</th>\n",
       "      <td>7043.0</td>\n",
       "      <td>0.216669</td>\n",
       "      <td>0.412004</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.000</td>\n",
       "      <td>1.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Offer_Offer A</th>\n",
       "      <td>7043.0</td>\n",
       "      <td>0.073832</td>\n",
       "      <td>0.261516</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.000</td>\n",
       "      <td>1.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Offer_Offer B</th>\n",
       "      <td>7043.0</td>\n",
       "      <td>0.116996</td>\n",
       "      <td>0.321438</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.000</td>\n",
       "      <td>1.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Offer_Offer C</th>\n",
       "      <td>7043.0</td>\n",
       "      <td>0.058924</td>\n",
       "      <td>0.235499</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.000</td>\n",
       "      <td>1.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Offer_Offer D</th>\n",
       "      <td>7043.0</td>\n",
       "      <td>0.085475</td>\n",
       "      <td>0.279607</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.000</td>\n",
       "      <td>1.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Offer_Offer E</th>\n",
       "      <td>7043.0</td>\n",
       "      <td>0.114298</td>\n",
       "      <td>0.318195</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.000</td>\n",
       "      <td>1.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Payment Method_Credit Card</th>\n",
       "      <td>7043.0</td>\n",
       "      <td>0.390317</td>\n",
       "      <td>0.487856</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.000</td>\n",
       "      <td>1.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Payment Method_Mailed Check</th>\n",
       "      <td>7043.0</td>\n",
       "      <td>0.054664</td>\n",
       "      <td>0.227340</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.000</td>\n",
       "      <td>1.00</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                    count         mean          std      min  \\\n",
       "Satisfaction Score                 7043.0     2.244924     1.201657     0.00   \n",
       "Churn Value                        7043.0     0.265370     0.441561     0.00   \n",
       "CLTV                               7043.0  4400.295755  1183.057152  2003.00   \n",
       "Referred a Friend                  7043.0     0.457476     0.498224     0.00   \n",
       "Number of Referrals                7043.0     1.951867     3.001199     0.00   \n",
       "Tenure in Months                   7043.0    32.386767    24.542061     1.00   \n",
       "Phone Service                      7043.0     0.903166     0.295752     0.00   \n",
       "Avg Monthly Long Distance Charges  7043.0    22.958954    15.448113     0.00   \n",
       "Multiple Lines                     7043.0     0.421837     0.493888     0.00   \n",
       "Internet Service                   7043.0     0.783331     0.412004     0.00   \n",
       "Avg Monthly GB Download            7043.0    20.515405    20.418940     0.00   \n",
       "Online Security                    7043.0     0.286668     0.452237     0.00   \n",
       "Online Backup                      7043.0     0.344881     0.475363     0.00   \n",
       "Device Protection Plan             7043.0     0.343888     0.475038     0.00   \n",
       "Premium Tech Support               7043.0     0.290217     0.453895     0.00   \n",
       "Streaming TV                       7043.0     0.384353     0.486477     0.00   \n",
       "Streaming Movies                   7043.0     0.387903     0.487307     0.00   \n",
       "Streaming Music                    7043.0     0.353259     0.478016     0.00   \n",
       "Unlimited Data                     7043.0     0.673719     0.468885     0.00   \n",
       "Paperless Billing                  7043.0     0.592219     0.491457     0.00   \n",
       "Monthly Charge                     7043.0    64.761692    30.090047    18.25   \n",
       "Total Charges                      7043.0  2280.381264  2266.220462    18.80   \n",
       "Total Refunds                      7043.0     1.962182     7.902614     0.00   \n",
       "Total Extra Data Charges           7043.0     6.860713    25.104978     0.00   \n",
       "Total Long Distance Charges        7043.0   749.099262   846.660055     0.00   \n",
       "Total Revenue                      7043.0  3034.379056  2865.204542    21.36   \n",
       "Contract_One Year                  7043.0     0.220077     0.414328     0.00   \n",
       "Contract_Two Year                  7043.0     0.267358     0.442612     0.00   \n",
       "Internet Type_DSL                  7043.0     0.234559     0.423753     0.00   \n",
       "Internet Type_Fiber Optic          7043.0     0.430924     0.495241     0.00   \n",
       "Internet Type_None                 7043.0     0.216669     0.412004     0.00   \n",
       "Offer_Offer A                      7043.0     0.073832     0.261516     0.00   \n",
       "Offer_Offer B                      7043.0     0.116996     0.321438     0.00   \n",
       "Offer_Offer C                      7043.0     0.058924     0.235499     0.00   \n",
       "Offer_Offer D                      7043.0     0.085475     0.279607     0.00   \n",
       "Offer_Offer E                      7043.0     0.114298     0.318195     0.00   \n",
       "Payment Method_Credit Card         7043.0     0.390317     0.487856     0.00   \n",
       "Payment Method_Mailed Check        7043.0     0.054664     0.227340     0.00   \n",
       "\n",
       "                                        25%      50%       75%       max  \n",
       "Satisfaction Score                    2.000     2.00     3.000      4.00  \n",
       "Churn Value                           0.000     0.00     1.000      1.00  \n",
       "CLTV                               3469.000  4527.00  5380.500   6500.00  \n",
       "Referred a Friend                     0.000     0.00     1.000      1.00  \n",
       "Number of Referrals                   0.000     0.00     3.000     11.00  \n",
       "Tenure in Months                      9.000    29.00    55.000     72.00  \n",
       "Phone Service                         1.000     1.00     1.000      1.00  \n",
       "Avg Monthly Long Distance Charges     9.210    22.89    36.395     49.99  \n",
       "Multiple Lines                        0.000     0.00     1.000      1.00  \n",
       "Internet Service                      1.000     1.00     1.000      1.00  \n",
       "Avg Monthly GB Download               3.000    17.00    27.000     85.00  \n",
       "Online Security                       0.000     0.00     1.000      1.00  \n",
       "Online Backup                         0.000     0.00     1.000      1.00  \n",
       "Device Protection Plan                0.000     0.00     1.000      1.00  \n",
       "Premium Tech Support                  0.000     0.00     1.000      1.00  \n",
       "Streaming TV                          0.000     0.00     1.000      1.00  \n",
       "Streaming Movies                      0.000     0.00     1.000      1.00  \n",
       "Streaming Music                       0.000     0.00     1.000      1.00  \n",
       "Unlimited Data                        0.000     1.00     1.000      1.00  \n",
       "Paperless Billing                     0.000     1.00     1.000      1.00  \n",
       "Monthly Charge                       35.500    70.35    89.850    118.75  \n",
       "Total Charges                       400.150  1394.55  3786.600   8684.80  \n",
       "Total Refunds                         0.000     0.00     0.000     49.79  \n",
       "Total Extra Data Charges              0.000     0.00     0.000    150.00  \n",
       "Total Long Distance Charges          70.545   401.44  1191.100   3564.72  \n",
       "Total Revenue                       605.610  2108.64  4801.145  11979.34  \n",
       "Contract_One Year                     0.000     0.00     0.000      1.00  \n",
       "Contract_Two Year                     0.000     0.00     1.000      1.00  \n",
       "Internet Type_DSL                     0.000     0.00     0.000      1.00  \n",
       "Internet Type_Fiber Optic             0.000     0.00     1.000      1.00  \n",
       "Internet Type_None                    0.000     0.00     0.000      1.00  \n",
       "Offer_Offer A                         0.000     0.00     0.000      1.00  \n",
       "Offer_Offer B                         0.000     0.00     0.000      1.00  \n",
       "Offer_Offer C                         0.000     0.00     0.000      1.00  \n",
       "Offer_Offer D                         0.000     0.00     0.000      1.00  \n",
       "Offer_Offer E                         0.000     0.00     0.000      1.00  \n",
       "Payment Method_Credit Card            0.000     0.00     1.000      1.00  \n",
       "Payment Method_Mailed Check           0.000     0.00     0.000      1.00  "
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#instantiate our encoders\n",
    "lb, le = LabelBinarizer(), LabelEncoder()\n",
    "\n",
    "#transform ordinal varibles\n",
    "for column in ordinal_variables:\n",
    "    df_joined[column] = le.fit_transform(df_joined[column])\n",
    "    \n",
    "#check that it has been transformed\n",
    "#df_joined['Satisfaction Score']\n",
    "\n",
    "#transform binary variables\n",
    "for column in binary_variables:\n",
    "    df_joined[column] = lb.fit_transform(df_joined[column])\n",
    "\n",
    "#check that it has been transformed    \n",
    "#df_joined['Phone Service']\n",
    "\n",
    "#transform the categorical varibles with one-hot encoding\n",
    "categorical_variables = list(set(categorical_variables) - set(ordinal_variables) - set(binary_variables))\n",
    "df_joined = pd.get_dummies(df_joined, columns = categorical_variables, drop_first = True)\n",
    "\n",
    "#check our new dataset\n",
    "df_joined.describe().T"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Index: 7043 entries, 8779-QRDMV to 3186-AJIEK\n",
      "Data columns (total 38 columns):\n",
      " #   Column                             Non-Null Count  Dtype  \n",
      "---  ------                             --------------  -----  \n",
      " 0   Satisfaction Score                 7043 non-null   int64  \n",
      " 1   Churn Value                        7043 non-null   int64  \n",
      " 2   CLTV                               7043 non-null   int64  \n",
      " 3   Referred a Friend                  7043 non-null   int64  \n",
      " 4   Number of Referrals                7043 non-null   int64  \n",
      " 5   Tenure in Months                   7043 non-null   int64  \n",
      " 6   Phone Service                      7043 non-null   int64  \n",
      " 7   Avg Monthly Long Distance Charges  7043 non-null   float64\n",
      " 8   Multiple Lines                     7043 non-null   int64  \n",
      " 9   Internet Service                   7043 non-null   int64  \n",
      " 10  Avg Monthly GB Download            7043 non-null   int64  \n",
      " 11  Online Security                    7043 non-null   int64  \n",
      " 12  Online Backup                      7043 non-null   int64  \n",
      " 13  Device Protection Plan             7043 non-null   int64  \n",
      " 14  Premium Tech Support               7043 non-null   int64  \n",
      " 15  Streaming TV                       7043 non-null   int64  \n",
      " 16  Streaming Movies                   7043 non-null   int64  \n",
      " 17  Streaming Music                    7043 non-null   int64  \n",
      " 18  Unlimited Data                     7043 non-null   int64  \n",
      " 19  Paperless Billing                  7043 non-null   int64  \n",
      " 20  Monthly Charge                     7043 non-null   float64\n",
      " 21  Total Charges                      7043 non-null   float64\n",
      " 22  Total Refunds                      7043 non-null   float64\n",
      " 23  Total Extra Data Charges           7043 non-null   int64  \n",
      " 24  Total Long Distance Charges        7043 non-null   float64\n",
      " 25  Total Revenue                      7043 non-null   float64\n",
      " 26  Contract_One Year                  7043 non-null   uint8  \n",
      " 27  Contract_Two Year                  7043 non-null   uint8  \n",
      " 28  Internet Type_DSL                  7043 non-null   uint8  \n",
      " 29  Internet Type_Fiber Optic          7043 non-null   uint8  \n",
      " 30  Internet Type_None                 7043 non-null   uint8  \n",
      " 31  Offer_Offer A                      7043 non-null   uint8  \n",
      " 32  Offer_Offer B                      7043 non-null   uint8  \n",
      " 33  Offer_Offer C                      7043 non-null   uint8  \n",
      " 34  Offer_Offer D                      7043 non-null   uint8  \n",
      " 35  Offer_Offer E                      7043 non-null   uint8  \n",
      " 36  Payment Method_Credit Card         7043 non-null   uint8  \n",
      " 37  Payment Method_Mailed Check        7043 non-null   uint8  \n",
      "dtypes: float64(6), int64(20), uint8(12)\n",
      "memory usage: 1.8+ MB\n"
     ]
    }
   ],
   "source": [
    "df_joined.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As you can see our new avariables are on different scales, hence we need to scale our features. We do that using our MinMax Scaler"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>count</th>\n",
       "      <th>mean</th>\n",
       "      <th>std</th>\n",
       "      <th>min</th>\n",
       "      <th>25%</th>\n",
       "      <th>50%</th>\n",
       "      <th>75%</th>\n",
       "      <th>max</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Satisfaction Score</th>\n",
       "      <td>7043.0</td>\n",
       "      <td>0.561231</td>\n",
       "      <td>0.300414</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.500000</td>\n",
       "      <td>0.500000</td>\n",
       "      <td>0.750000</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Churn Value</th>\n",
       "      <td>7043.0</td>\n",
       "      <td>0.265370</td>\n",
       "      <td>0.441561</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>CLTV</th>\n",
       "      <td>7043.0</td>\n",
       "      <td>0.533088</td>\n",
       "      <td>0.263077</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.325995</td>\n",
       "      <td>0.561263</td>\n",
       "      <td>0.751056</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Referred a Friend</th>\n",
       "      <td>7043.0</td>\n",
       "      <td>0.457476</td>\n",
       "      <td>0.498224</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Number of Referrals</th>\n",
       "      <td>7043.0</td>\n",
       "      <td>0.177442</td>\n",
       "      <td>0.272836</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.272727</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Tenure in Months</th>\n",
       "      <td>7043.0</td>\n",
       "      <td>0.442067</td>\n",
       "      <td>0.345663</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.112676</td>\n",
       "      <td>0.394366</td>\n",
       "      <td>0.760563</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Phone Service</th>\n",
       "      <td>7043.0</td>\n",
       "      <td>0.903166</td>\n",
       "      <td>0.295752</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Avg Monthly Long Distance Charges</th>\n",
       "      <td>7043.0</td>\n",
       "      <td>0.459271</td>\n",
       "      <td>0.309024</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.184237</td>\n",
       "      <td>0.457892</td>\n",
       "      <td>0.728046</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Multiple Lines</th>\n",
       "      <td>7043.0</td>\n",
       "      <td>0.421837</td>\n",
       "      <td>0.493888</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Internet Service</th>\n",
       "      <td>7043.0</td>\n",
       "      <td>0.783331</td>\n",
       "      <td>0.412004</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Avg Monthly GB Download</th>\n",
       "      <td>7043.0</td>\n",
       "      <td>0.241358</td>\n",
       "      <td>0.240223</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.035294</td>\n",
       "      <td>0.200000</td>\n",
       "      <td>0.317647</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Online Security</th>\n",
       "      <td>7043.0</td>\n",
       "      <td>0.286668</td>\n",
       "      <td>0.452237</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Online Backup</th>\n",
       "      <td>7043.0</td>\n",
       "      <td>0.344881</td>\n",
       "      <td>0.475363</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Device Protection Plan</th>\n",
       "      <td>7043.0</td>\n",
       "      <td>0.343888</td>\n",
       "      <td>0.475038</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Premium Tech Support</th>\n",
       "      <td>7043.0</td>\n",
       "      <td>0.290217</td>\n",
       "      <td>0.453895</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Streaming TV</th>\n",
       "      <td>7043.0</td>\n",
       "      <td>0.384353</td>\n",
       "      <td>0.486477</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Streaming Movies</th>\n",
       "      <td>7043.0</td>\n",
       "      <td>0.387903</td>\n",
       "      <td>0.487307</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Streaming Music</th>\n",
       "      <td>7043.0</td>\n",
       "      <td>0.353259</td>\n",
       "      <td>0.478016</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Unlimited Data</th>\n",
       "      <td>7043.0</td>\n",
       "      <td>0.673719</td>\n",
       "      <td>0.468885</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Paperless Billing</th>\n",
       "      <td>7043.0</td>\n",
       "      <td>0.592219</td>\n",
       "      <td>0.491457</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Monthly Charge</th>\n",
       "      <td>7043.0</td>\n",
       "      <td>0.462803</td>\n",
       "      <td>0.299403</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.171642</td>\n",
       "      <td>0.518408</td>\n",
       "      <td>0.712438</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Total Charges</th>\n",
       "      <td>7043.0</td>\n",
       "      <td>0.260972</td>\n",
       "      <td>0.261507</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.044005</td>\n",
       "      <td>0.158753</td>\n",
       "      <td>0.434780</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Total Refunds</th>\n",
       "      <td>7043.0</td>\n",
       "      <td>0.039409</td>\n",
       "      <td>0.158719</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Total Extra Data Charges</th>\n",
       "      <td>7043.0</td>\n",
       "      <td>0.045738</td>\n",
       "      <td>0.167367</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Total Long Distance Charges</th>\n",
       "      <td>7043.0</td>\n",
       "      <td>0.210143</td>\n",
       "      <td>0.237511</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.019790</td>\n",
       "      <td>0.112615</td>\n",
       "      <td>0.334136</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Total Revenue</th>\n",
       "      <td>7043.0</td>\n",
       "      <td>0.251967</td>\n",
       "      <td>0.239606</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.048859</td>\n",
       "      <td>0.174551</td>\n",
       "      <td>0.399715</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Contract_One Year</th>\n",
       "      <td>7043.0</td>\n",
       "      <td>0.220077</td>\n",
       "      <td>0.414328</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Contract_Two Year</th>\n",
       "      <td>7043.0</td>\n",
       "      <td>0.267358</td>\n",
       "      <td>0.442612</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Internet Type_DSL</th>\n",
       "      <td>7043.0</td>\n",
       "      <td>0.234559</td>\n",
       "      <td>0.423753</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Internet Type_Fiber Optic</th>\n",
       "      <td>7043.0</td>\n",
       "      <td>0.430924</td>\n",
       "      <td>0.495241</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Internet Type_None</th>\n",
       "      <td>7043.0</td>\n",
       "      <td>0.216669</td>\n",
       "      <td>0.412004</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Offer_Offer A</th>\n",
       "      <td>7043.0</td>\n",
       "      <td>0.073832</td>\n",
       "      <td>0.261516</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Offer_Offer B</th>\n",
       "      <td>7043.0</td>\n",
       "      <td>0.116996</td>\n",
       "      <td>0.321438</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Offer_Offer C</th>\n",
       "      <td>7043.0</td>\n",
       "      <td>0.058924</td>\n",
       "      <td>0.235499</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Offer_Offer D</th>\n",
       "      <td>7043.0</td>\n",
       "      <td>0.085475</td>\n",
       "      <td>0.279607</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Offer_Offer E</th>\n",
       "      <td>7043.0</td>\n",
       "      <td>0.114298</td>\n",
       "      <td>0.318195</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Payment Method_Credit Card</th>\n",
       "      <td>7043.0</td>\n",
       "      <td>0.390317</td>\n",
       "      <td>0.487856</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Payment Method_Mailed Check</th>\n",
       "      <td>7043.0</td>\n",
       "      <td>0.054664</td>\n",
       "      <td>0.227340</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                    count      mean       std  min       25%  \\\n",
       "Satisfaction Score                 7043.0  0.561231  0.300414  0.0  0.500000   \n",
       "Churn Value                        7043.0  0.265370  0.441561  0.0  0.000000   \n",
       "CLTV                               7043.0  0.533088  0.263077  0.0  0.325995   \n",
       "Referred a Friend                  7043.0  0.457476  0.498224  0.0  0.000000   \n",
       "Number of Referrals                7043.0  0.177442  0.272836  0.0  0.000000   \n",
       "Tenure in Months                   7043.0  0.442067  0.345663  0.0  0.112676   \n",
       "Phone Service                      7043.0  0.903166  0.295752  0.0  1.000000   \n",
       "Avg Monthly Long Distance Charges  7043.0  0.459271  0.309024  0.0  0.184237   \n",
       "Multiple Lines                     7043.0  0.421837  0.493888  0.0  0.000000   \n",
       "Internet Service                   7043.0  0.783331  0.412004  0.0  1.000000   \n",
       "Avg Monthly GB Download            7043.0  0.241358  0.240223  0.0  0.035294   \n",
       "Online Security                    7043.0  0.286668  0.452237  0.0  0.000000   \n",
       "Online Backup                      7043.0  0.344881  0.475363  0.0  0.000000   \n",
       "Device Protection Plan             7043.0  0.343888  0.475038  0.0  0.000000   \n",
       "Premium Tech Support               7043.0  0.290217  0.453895  0.0  0.000000   \n",
       "Streaming TV                       7043.0  0.384353  0.486477  0.0  0.000000   \n",
       "Streaming Movies                   7043.0  0.387903  0.487307  0.0  0.000000   \n",
       "Streaming Music                    7043.0  0.353259  0.478016  0.0  0.000000   \n",
       "Unlimited Data                     7043.0  0.673719  0.468885  0.0  0.000000   \n",
       "Paperless Billing                  7043.0  0.592219  0.491457  0.0  0.000000   \n",
       "Monthly Charge                     7043.0  0.462803  0.299403  0.0  0.171642   \n",
       "Total Charges                      7043.0  0.260972  0.261507  0.0  0.044005   \n",
       "Total Refunds                      7043.0  0.039409  0.158719  0.0  0.000000   \n",
       "Total Extra Data Charges           7043.0  0.045738  0.167367  0.0  0.000000   \n",
       "Total Long Distance Charges        7043.0  0.210143  0.237511  0.0  0.019790   \n",
       "Total Revenue                      7043.0  0.251967  0.239606  0.0  0.048859   \n",
       "Contract_One Year                  7043.0  0.220077  0.414328  0.0  0.000000   \n",
       "Contract_Two Year                  7043.0  0.267358  0.442612  0.0  0.000000   \n",
       "Internet Type_DSL                  7043.0  0.234559  0.423753  0.0  0.000000   \n",
       "Internet Type_Fiber Optic          7043.0  0.430924  0.495241  0.0  0.000000   \n",
       "Internet Type_None                 7043.0  0.216669  0.412004  0.0  0.000000   \n",
       "Offer_Offer A                      7043.0  0.073832  0.261516  0.0  0.000000   \n",
       "Offer_Offer B                      7043.0  0.116996  0.321438  0.0  0.000000   \n",
       "Offer_Offer C                      7043.0  0.058924  0.235499  0.0  0.000000   \n",
       "Offer_Offer D                      7043.0  0.085475  0.279607  0.0  0.000000   \n",
       "Offer_Offer E                      7043.0  0.114298  0.318195  0.0  0.000000   \n",
       "Payment Method_Credit Card         7043.0  0.390317  0.487856  0.0  0.000000   \n",
       "Payment Method_Mailed Check        7043.0  0.054664  0.227340  0.0  0.000000   \n",
       "\n",
       "                                        50%       75%  max  \n",
       "Satisfaction Score                 0.500000  0.750000  1.0  \n",
       "Churn Value                        0.000000  1.000000  1.0  \n",
       "CLTV                               0.561263  0.751056  1.0  \n",
       "Referred a Friend                  0.000000  1.000000  1.0  \n",
       "Number of Referrals                0.000000  0.272727  1.0  \n",
       "Tenure in Months                   0.394366  0.760563  1.0  \n",
       "Phone Service                      1.000000  1.000000  1.0  \n",
       "Avg Monthly Long Distance Charges  0.457892  0.728046  1.0  \n",
       "Multiple Lines                     0.000000  1.000000  1.0  \n",
       "Internet Service                   1.000000  1.000000  1.0  \n",
       "Avg Monthly GB Download            0.200000  0.317647  1.0  \n",
       "Online Security                    0.000000  1.000000  1.0  \n",
       "Online Backup                      0.000000  1.000000  1.0  \n",
       "Device Protection Plan             0.000000  1.000000  1.0  \n",
       "Premium Tech Support               0.000000  1.000000  1.0  \n",
       "Streaming TV                       0.000000  1.000000  1.0  \n",
       "Streaming Movies                   0.000000  1.000000  1.0  \n",
       "Streaming Music                    0.000000  1.000000  1.0  \n",
       "Unlimited Data                     1.000000  1.000000  1.0  \n",
       "Paperless Billing                  1.000000  1.000000  1.0  \n",
       "Monthly Charge                     0.518408  0.712438  1.0  \n",
       "Total Charges                      0.158753  0.434780  1.0  \n",
       "Total Refunds                      0.000000  0.000000  1.0  \n",
       "Total Extra Data Charges           0.000000  0.000000  1.0  \n",
       "Total Long Distance Charges        0.112615  0.334136  1.0  \n",
       "Total Revenue                      0.174551  0.399715  1.0  \n",
       "Contract_One Year                  0.000000  0.000000  1.0  \n",
       "Contract_Two Year                  0.000000  1.000000  1.0  \n",
       "Internet Type_DSL                  0.000000  0.000000  1.0  \n",
       "Internet Type_Fiber Optic          0.000000  1.000000  1.0  \n",
       "Internet Type_None                 0.000000  0.000000  1.0  \n",
       "Offer_Offer A                      0.000000  0.000000  1.0  \n",
       "Offer_Offer B                      0.000000  0.000000  1.0  \n",
       "Offer_Offer C                      0.000000  0.000000  1.0  \n",
       "Offer_Offer D                      0.000000  0.000000  1.0  \n",
       "Offer_Offer E                      0.000000  0.000000  1.0  \n",
       "Payment Method_Credit Card         0.000000  1.000000  1.0  \n",
       "Payment Method_Mailed Check        0.000000  0.000000  1.0  "
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#instantiate the scaler\n",
    "mm = MinMaxScaler()\n",
    "\n",
    "#we just need to scale the ordinal variables and numeric variables since the others are already between 0 and 1\n",
    "for column in [ordinal_variables + numeric_variables]:\n",
    "    df_joined[column] = mm.fit_transform(df_joined[column])\n",
    "df_joined.describe().T"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can now see that all our values are in the range of 0 and 1. Let's quickly look at the correlation to the churn variable before we jump into modelling."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Churn Value                          1.000000\n",
       "Satisfaction Score                   0.754649\n",
       "Tenure in Months                     0.352861\n",
       "Contract_Two Year                    0.328195\n",
       "Number of Referrals                  0.286540\n",
       "Internet Type_Fiber Optic            0.279623\n",
       "Internet Service                     0.227890\n",
       "Internet Type_None                   0.227890\n",
       "Total Long Distance Charges          0.223756\n",
       "Total Revenue                        0.223003\n",
       "Payment Method_Credit Card           0.218528\n",
       "Offer_Offer E                        0.214648\n",
       "Total Charges                        0.198546\n",
       "Monthly Charge                       0.193356\n",
       "Paperless Billing                    0.191825\n",
       "Contract_One Year                    0.190418\n",
       "Online Security                      0.171226\n",
       "Unlimited Data                       0.166545\n",
       "Premium Tech Support                 0.164674\n",
       "Referred a Friend                    0.149122\n",
       "CLTV                                 0.127463\n",
       "Offer_Offer A                        0.126654\n",
       "Offer_Offer B                        0.117723\n",
       "Internet Type_DSL                    0.099716\n",
       "Online Backup                        0.082255\n",
       "Device Protection Plan               0.066160\n",
       "Streaming TV                         0.063228\n",
       "Streaming Movies                     0.061382\n",
       "Payment Method_Mailed Check          0.056348\n",
       "Avg Monthly GB Download              0.048868\n",
       "Streaming Music                      0.045587\n",
       "Multiple Lines                       0.040102\n",
       "Total Refunds                        0.033709\n",
       "Offer_Offer C                        0.020660\n",
       "Phone Service                        0.011942\n",
       "Avg Monthly Long Distance Charges    0.008120\n",
       "Total Extra Data Charges             0.007139\n",
       "Offer_Offer D                        0.001435\n",
       "Name: Churn Value, dtype: float64"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "correlations = df_joined.corr().abs() #this returns all correlations in the entire df\n",
    "correlations = correlations['Churn Value'] #this returns all correlations against the churn value which will be our target\n",
    "correlations_sorted = correlations.sort_values(kind=\"quicksort\", ascending = False) #sort the correlations ascending\n",
    "display(correlations_sorted)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can see rather high correlations with the churn value. I am little bit unsure whether the Satisfaction score is available prior to churn, but in theory it could be, hence I keep it. Before moving on I save the dataframe to a csv file in case I want to use the processed data later."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_joined.to_csv('churndata_processed.csv', index = False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h2> 4. Model Creation and Training </h2>\n",
    "Now when we have prepared our data for training we can start creating our models to predict the data. As mentioned in the beginning of the workbook we will try 3 different methods to predict churn:\n",
    "\n",
    "1. K-Means\n",
    "2. Hierarchical Aggolomorate\n",
    "3. K-Means with Random Forest\n",
    "\n",
    "We will measure the different models with the following metrics:\n",
    "\n",
    "- Accuracy\n",
    "- F1\n",
    "\n",
    "We will also look at the Confusion Matrix to get a detailed understanding of how the models predict churn."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h3> 4.1. K-Means </h3>\n",
    "We will use two clusters here since we want to use the clusters as classification."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "metadata": {},
   "outputs": [],
   "source": [
    "km = KMeans(n_clusters=2, random_state=42)\n",
    "km = km.fit(df_joined)\n",
    "df_joined['kmeans'] = km.predict(df_joined)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.68      0.72      0.70      5174\n",
      "           1       0.07      0.06      0.07      1869\n",
      "\n",
      "    accuracy                           0.55      7043\n",
      "   macro avg       0.38      0.39      0.38      7043\n",
      "weighted avg       0.52      0.55      0.53      7043\n",
      "\n",
      "F1 score:  0.07\n",
      "Accuracy score:  0.55\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "Text(24.0, 0.5, 'Prediction')"
      ]
     },
     "execution_count": 97,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 360x360 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "#print results\n",
    "print(classification_report(df_joined['Churn Value'], df_joined['kmeans']))\n",
    "print('F1 score: ', round(f1_score(df_joined['Churn Value'], df_joined['kmeans']), 2))\n",
    "print('Accuracy score: ', round(accuracy_score(df_joined['Churn Value'], df_joined['kmeans']), 2))\n",
    "\n",
    "#visualize our confusion matrix\n",
    "#sns.set_palette(sns.color_palette(colors))\n",
    "_, ax = plt.subplots(figsize = (5,5))\n",
    "ax = sns.heatmap(confusion_matrix(df_joined['Churn Value'], df_joined['kmeans']), annot = True, fmt = 'd')\n",
    "labels = ['Not Churn', 'Churn']\n",
    "ax.set_xticklabels(labels, fontsize=10)\n",
    "ax.set_yticklabels(labels, fontsize=10)\n",
    "ax.set_xlabel('Ground Truth', fontsize = 12)\n",
    "ax.set_ylabel('Prediction', fontsize = 12)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Looking at the metrics we can tell from the accuracy and F1 being rather low. Looking at recall and precision we see both are poor, meaning the model does not catch the churns very well and the churns it catches are not actually true churns, leading to a very low F1 score.\n",
    "\n",
    "Looking the confusion matrix we see that the model predicts not churn 1444 times when it actually was churn and churn 1752 times when it was not churn."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h3> 4.2. Hierarchical Agglomorate </h3>\n",
    "Again we are using 2 clusters since we want to use the clusters as classification."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {},
   "outputs": [],
   "source": [
    "ag = AgglomerativeClustering(n_clusters=2, linkage='ward', compute_full_tree=True)\n",
    "ag = ag.fit(df_joined)\n",
    "df_joined['agglom'] = ag.fit_predict(df_joined)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.68      0.73      0.70      5174\n",
      "           1       0.07      0.06      0.07      1869\n",
      "\n",
      "    accuracy                           0.55      7043\n",
      "   macro avg       0.38      0.39      0.39      7043\n",
      "weighted avg       0.52      0.55      0.53      7043\n",
      "\n",
      "F1 score:  0.07\n",
      "Accuracy score:  0.55\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "Text(24.0, 0.5, 'Prediction')"
      ]
     },
     "execution_count": 79,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 360x360 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "print(classification_report(df_joined['Churn Value'], df_joined['agglom']))\n",
    "print('F1 score: ', round(f1_score(df_joined['Churn Value'], df_joined['agglom']), 2))\n",
    "print('Accuracy score: ', round(accuracy_score(df_joined['Churn Value'], df_joined['agglom']), 2))\n",
    "\n",
    "#visualize our confusion matrix\n",
    "#sns.set_palette(sns.color_palette(colors))\n",
    "_, ax = plt.subplots(figsize = (5,5))\n",
    "ax = sns.heatmap(confusion_matrix(df_joined['Churn Value'], df_joined['agglom']), annot = True, fmt = 'd')\n",
    "labels = ['Not Churn', 'Churn']\n",
    "ax.set_xticklabels(labels, fontsize=10)\n",
    "ax.set_yticklabels(labels, fontsize=10)\n",
    "ax.set_xlabel('Ground Truth', fontsize = 12)\n",
    "ax.set_ylabel('Prediction', fontsize = 12)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Looking at the Hierarchical Agglomorate clustering we basically see the same thing.\n",
    "\n",
    "Looking the confusion matrix we see that the model predicts not churn 1413 times when it actually was churn and churn 1756 times when it was not churn.\n",
    "\n",
    "Even if the results are the not the same, they both perform rather poor. Let's see how using the input from the clustering in a supervised model."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h3> 4.3. K-Means with Random Forest </h3>\n",
    "In this method we use K-Means clustering with two clusters as a feature input to the supervised model to test if we can improve the supervised classification result. Let's start by splitting our target variable from the input data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    0.73463\n",
       "1    0.26537\n",
       "Name: Churn Value, dtype: float64"
      ]
     },
     "execution_count": 98,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#reset index\n",
    "df_joined = df_joined.reset_index(drop = True)\n",
    "\n",
    "#Set up target variable\n",
    "y = df_joined['Churn Value']\n",
    "X_with_kmeans = df_joined.drop(['agglom', 'Churn Value'], axis=1)\n",
    "X_with_agglom = df_joined.drop(['kmeans', 'Churn Value'], axis=1)\n",
    "X_without_kmeans = X_with_kmeans.drop('kmeans', axis=1)\n",
    "\n",
    "#check if imbalanced\n",
    "y.value_counts(normalize = True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can see that the target variable is imbalanced, so let's use Stratified Shuffle Split."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Without kmeans cluster as input to Random Forest, roc-auc is \"0.985230371458016\"\n",
      "Using kmeans cluster as input to Random Forest, roc-auc is \"0.9848955530830196\"\n",
      "Using agglom cluster as input to Random Forest, roc-auc is \"0.9851032613156526\"\n"
     ]
    }
   ],
   "source": [
    "sss = StratifiedShuffleSplit(n_splits=10, random_state=42, test_size = 1500)\n",
    "\n",
    "def get_avg_roc_10splits(estimator, X, y):\n",
    "    roc_auc_list = []\n",
    "    for train_index, test_index in sss.split(X, y):\n",
    "        X_train, X_test = X.iloc[train_index], X.iloc[test_index]\n",
    "        y_train, y_test = y.iloc[train_index], y.iloc[test_index]\n",
    "        estimator.fit(X_train, y_train)\n",
    "        y_predicted = estimator.predict(X_test)\n",
    "        y_scored = estimator.predict_proba(X_test)[:, 1]\n",
    "        roc_auc_list.append(roc_auc_score(y_test, y_scored))\n",
    "    return np.mean(roc_auc_list)\n",
    "# return classification_report(y_test, y_predicted)\n",
    "\n",
    "estimator = RandomForestClassifier()\n",
    "roc_with_kmeans = get_avg_roc_10splits(estimator, X_with_kmeans, y)\n",
    "roc_with_agglom = get_avg_roc_10splits(estimator, X_with_agglom, y)\n",
    "roc_without_kmeans = get_avg_roc_10splits(estimator, X_without_kmeans, y)\n",
    "print(\"Without kmeans cluster as input to Random Forest, roc-auc is \\\"{0}\\\"\".format(roc_without_kmeans))\n",
    "print(\"Using kmeans cluster as input to Random Forest, roc-auc is \\\"{0}\\\"\".format(roc_with_kmeans))\n",
    "print(\"Using agglom cluster as input to Random Forest, roc-auc is \\\"{0}\\\"\".format(roc_with_agglom))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can see that there is not a big difference in result. In fact, adding the features give a worse result eventhough \"agglom\" gives a slightly less worse result compared to K-means. This is not surprising given the poor results from the clustering exercise."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h2> 5. Conclusions and Next Steps </h2>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "From this exercise we learned that it was not possible to use a simple clustering method as a classifier of customer churn. In addition to that we tested to add the clustering as an input to a supervised model without positive results. Given the sensitivity to scale for clustering models I would recommend revisiting the following:\n",
    "\n",
    "1. Scaling of parameters\n",
    "2. Parameters in clustering methods (e.g. distance methods)\n",
    "3. Feature engineering with principal component analysis\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
